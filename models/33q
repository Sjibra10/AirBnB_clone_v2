#!/usr/bin/python3
""" Place Module for HBNB project """
from models.base_model import BaseModel, Base
import sqlalchemy
from sqlalchemy import Column, String, Integer, Float, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import Table
from os import getenv
import models
from models.review import Review
from models.amenity import Amenity

a_table = Table('place_amenity', Base.metadata,
                Column('place_id', Integer, ForeignKey('places.id'), primary_key=True, nullable=False),
                Column('amenity_id', String(60), ForeignKey('amenities.id'), primary_key=True, nullable=False))


class Place(BaseModel, Base):
    """ A place to stay """
    __tablename__ = 'places'
    id = Column(String(36), primary_key=True, nullable=False, unique=True)
    city_id = Column(String(60), ForeignKey('cities.id'), nullable=False)
    user_id = Column(String(60), ForeignKey('users.id'), nullable=False)
    name = Column(String(128), nullable=False)
    description = Column(String(1024), nullable=True)
    number_rooms = Column(Integer, nullable=False)
    number_bathrooms = Column(Integer, nullable=False, default=0)
    max_guest = Column(Integer, nullable=False, default=0)
    price_by_night = Column(Integer, nullable=False, default=0)
    latitude = Column(Float, nullable=True)
    longitude = Column(Float, nullable=True)
    reviews = relationship("Review", backref="place", cascade="all, delete-orphan")
    amenities = relationship("Amenity", secondary="place_amenity", viewonly=False, backref="places")


    def __init__(self, *args, **kwargs):
        """init for place"""
        super().__init__(*args, **kwargs)
    
    if models.HBNB_TYPE_STORAGE != "db":
        @property
        def reviews(self):
            """Getter attribute that returns the list of Review instances
            with place_id equal to the current Place.id"""
            all_reviews = models.storage.all(models.Review)
            return [review for review in all_reviews.values() if review.place_id == self.id]

        @property
        def amenities(self):
            """Getter"""
            list_amenity = []
            amenity_ins = models.storage.all(Amenity)
            for i in amenity_ins.values():
                if i.id in self.amenity_ids:
                    list_amenity.append(i)
            print("Returning amenities:", list_amenity)
            return list_amenity

        @amenities.setter
        def amenities(self, value):
            if type(value) == Amenity:
                self.amenity_ids.append(value.id)
                print("Added Amenity with ID {} to Place with ID {}".format(value.id, self.id))

        @hybrid_property
        def place_amenities(self):
            """Custom property to access related amenities."""
            return [amenity.name for amenity in self.amenities]

        @place_amenities.expression
        def place_amenities(cls):
            """Expression for using the property in queries."""
            return cls.amenities.any()
